extends layout2
block head
  script(src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.js")
  script.
    window.onload = function(){ // when loads this will be called
      Vue.use("Vuetify");
      new Vue({ 
        el: '#app',
        data: function(){//declaring variables and stuff
            return {
              mealTypes: ['Breakfast','Lunch','Dinner','Snack'], // for the picker
              mealType: null, // noting selected originally
              noResult: false, // good or bad search
              items: [], // the items chose array of JSON
              summary: { // originally zero
                'calories':0,
                'fat':0,
                'protein':0,
                'carbohydrates':0,
                'potassium': 0,
                'vitaminA': 0
              },
              searchTerm:"", // this val gets searched
              pag:{}, // for pagination
              results: [],//results from the api Search
              headers: [//headers for data table
                {text:"name", value:"name"},
                {text:"action", value:""}
              ],
              added: false // meal successfully aded and stuff
            }
        }, 
        computed: { // these are methods to calculate the total of each nutrition such that even if items change the totals will too
            totalCalories: function(){//add it based n the aray so everyime item changes this will too
              var calories = 0;
              for(var item of this.items){
                calories += item.calories;
              }
              this.summary.calories=calories;
              return calories;
            },
            totalPotassium: function(){//add it based n the aray so everyime item changes this will too
              var potassium = 0; // pots short for potassium
              for(var item of this.items){
                var amount = 0;
                if(item.potassium){
                  amount = item.potassium;
                }
                potassium += amount;
              }
              this.summary.potassium=potassium;
              return potassium;
            },
            totalVitaminA: function(){//add it based n the aray so everyime item changes this will too
              var vitaminA = 0; // pots short for Vitamin A
              for(var item of this.items){
                var amount = 0;
                if(item.vitaminA){
                  amount = item.vitaminA;
                }
                vitaminA += amount;
              }
              this.summary.vitaminA=vitaminA;
              return vitaminA;
            },
            totalFat: function(){
              var fat = 0;
              for(var item of this.items){
                fat += item.fat;
              }
              this.summary.fat=fat;
              return fat;
            },
            totalProtein: function(){
              var protein = 0;
              for(var item of this.items){
                protein += item.protein;
              }
              this.summary.protein=protein;
              return protein;
            },
            totalCarbohydrates: function(){
              var carbs = 0;
              for(var item of this.items){
                carbs += item.carbohydrate;
              }
              this.summary.carbohydrates = carbs;
              return carbs;
            }
        },
        methods:{ 
          clear:function(){ // basically clears items or all selected foods
            console.log("mealtype is " +  this.mealType)
            this.items=[];
          },
          addFood(){ // add a food to the data base
            //does a post and adds it to the database
            axios.post("/api/meals",{
              items: this.items,
              mealType: this.mealType,
              summary: this.summary,
            });
            this.added = true;
            this.items=[];//clears the array of food stuff
            this.mealType=null;//clears meal Type'
            this.results=[];//clears the result
            console.log("add food method");
            //kinda like submitting the form
          },
          increment:function(){ // pagination increment
            this.pag.page++;
          },
          decrement:function(){ // pagination decrement
            if(this.pag.page > 1){
              this.pag.page--;
            }
          },
          onSearch:function(){ // searching the api for foods with the search term name 
            console.log("searching for " + this.searchTerm)
            axios.get("/api/food?search=" + this.searchTerm) // calls the first API which is the list of available foods and an ndbno number for the food
              .then((response)=>{
                if(response.data.list != undefined){//truthy if is defined// THIS DOES WORK!!!
                  this.results= response.data.list.item; //returned an array of JSON objects with name of each food and ndbno numberfor each food ndbno is like unique id for each food 
                  this.noResult = false; // this is for whether or not to error message
                }else{
                  this.noResult = true; // this is for the v-laert
                  this.results=[]; // clears result
                }
                console.log(this.results);
              })
              .catch(function(err){
                console.log(err);
              });
          },
          onSelect(item){
            console.log(JSON.stringify(item));
            //have now added it to the items array
            axios.get("/api/food/" + item.ndbno) // calls the nutrition api for the food when passed in the params of ndbno
              .then((response)=>{
                console.log(response);
                var food = response.data.foods[0].food; // first index cause it is ina that array there is a food object
                var item = {
                  "nbdno": food.desc.ndbno,
                  "name": food.desc.name
                };
                console.log(food.nutrients);
                for(var nutrient of food.nutrients){
                  console.log(nutrient.name);
                  switch(nutrient.name){//passing in variable
                    case 'Protein':// kinda like an if
                      item.protein=  Math.round( parseFloat(nutrient.value));//rounds the protein such that there is nothing like 3.999999999999 
                      break;
                    case 'Vitamin A, IU':// kinda like an if
                      item.vitaminA=  Math.round( parseFloat(nutrient.value));//rounds the protein such that there is nothing like 3.999999999999 
                      break;
                    case 'Potassium, K':
                      item.potassium=  Math.round( parseFloat(nutrient.value)) + 0;
                      break;
                    case 'Total lipid (fat)':
                      item.fat= Math.round( parseFloat(nutrient.value));//rounds
                      break;
                    case 'Carbohydrate, by difference':
                      item.carbohydrate= Math.round( parseFloat(nutrient.value));//rounds
                      break;
                    case 'Energy':
                      item.calories= Math.round( parseFloat(nutrient.value));//rounds
                      break;
                    default://do nothing
                      break;
                  }
                }
                

                this.items.push(item);
                
              })
              .catch(function(err){
                console.log(err);
              });
          }
        }
      });
    }
block content
  //-the main form is under this v-card
  v-card.lime.lighten-5
    v-container
      //-this container is all about selecting the meal type  and adding the meals
      v-card-title
        h1.display-3 Log Your Food
        v-spacer
        v-btn(v-on:click="addFood()" color="success") Add Meal
      v-alert(v-model='added' type="success") Your Meal was Added
      v-container
        v-layout(row, wrap)
          v-flex(xs12)
            h1 Meal
            div
              v-layout(row='', wrap='')
              v-container(fluid='', grid-list-xl='')
                v-layout(wrap='', align-center='')
                  v-flex(xs12='', sm6='', d-flex='')
                    v-select(:items='mealTypes', label='Meal Type' v-model='mealType' solo)
          //-v-flex is basically for layout its out of 12 so xs9 is gunna take up 3/4ths of the page caus 9/12
          v-flex(xs9)
            //- under here it displays all the meals selected and you can clear
            h1 List of Items
            v-container
              table
                thead
                  tr
                    th  Item Name        
                    th
                      v-btn(v-on:click="clear()"  color='light-blue accent-1') Clear
                tr(v-for='item in items')
                  td {{item.name}}    
          v-flex(xs3)
            //- this gives nutrition sum info
            h1 Summary
            v-container
              //-{{}} <= syntax can both call the method and the property
              p # items: {{items.length}} items
              p Calories: {{totalCalories}} kcal
              p Fat: {{totalFat}} g
              p Carbohydrates: {{totalCarbohydrates}} g
              p Protein: {{totalProtein}} g
              p Potassium: {{totalPotassium}} mg
              p Vitamin A: {{totalVitaminA}} mcg
        v-layout(row,wrap)
          v-flex(xs12)
            //- this is the searching part of the form
            h1 Search
              v-container
                v-text-field(solo v-model="searchTerm" label='Food Name' append-icon='search')
                v-btn(v-on:click="onSearch") Search
                v-btn(v-on:click="increment") Next Page
                v-btn(v-on:click="decrement") Previous Page
                h1 Search Results
                v-alert(v-model='noResult' type="error") No Results... Check Input
                v-data-table(:headers="headers" :items="results" :pagination.sync="pag")
                  template(slot="items" slot-scope="props")
                    td {{props.item.name}}
                    td
                      v-btn(v-on:click="onSelect(props.item)") Select

